syntax = "proto3";
package v0_3_0;

option java_package = "org.ballerinalang.observe.trace.extension.choreo.gen";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service Registration {
    rpc register (RegisterRequest) returns (RegisterResponse);
}

message RegisterRequest {
    // --- Mandatory fields ---
    // This is the hash of the Ballerina program's AST
    string astHash = 1; // obsId = f(astHash, projectSecret)

    // This is a unique ID for the project
    // This is stored at $USER/.config/choreo/obsgid/projectSecret
    string projectSecret = 2; // This is unique for an anonymous project. This maps to a obsGID, which can be public.

    // This is a unique ID for node/machine on which programs run.
    // if two programs foo and bar run in the same machine(node), they will have the same node ID
    string nodeId = 3;
}

message RegisterResponse {
    string obsId = 1; // When publishing, you need to send the obsId
    string obsGid = 2; // This will be used as the dir name where the projectSecret is stored. No need to send this when publishing.
    string obsUrl = 3; // This will contain the obsGID
    bool sendAst = 4;
}

message PublishProgramRequest {
    string observabilityId = 1;
    string programJson = 2;
}

service Negotiator {
    rpc getObservabilityUrl(GetObservabilityUrlRequest)
            returns (GetObservabilityUrlResponse);

    rpc getApplicationId(GetAppIdRequest)
            returns (GetAppIdResponse);

    rpc getObservabilityIDs(GetObservabilityIDsRequest)
            returns (GetObservabilityIDsResponse);

    rpc linkApplication (LinkApplicationRequest)
            returns (google.protobuf.Empty);
}

message GetObservabilityUrlRequest {
    string applicationId = 1;
}

message GetObservabilityUrlResponse {
    string url = 1;
}

message GetAppIdRequest {
    string observabilityId = 1;
}

message GetObservabilityIDsRequest {
    repeated string appIDs = 1;
}

message GetObservabilityIDsResponse {
    repeated AppIdToObservabilityIdMapping appIdToObsIdMapping = 1;
}

message AppIdToObservabilityIdMapping {
    string applicationId = 1;
    oneof id {
        string observabilityId = 2;
        bool notFound = 3;
    }
}

message GetAppIdResponse {
    oneof id {
        string applicationId = 1;
        bool notFound = 2;
    }
}

message LinkApplicationRequest {
    string observabilityId = 1;
    string applicationId = 2;
}
